}
sp1=Hom.Th(data.ppp,win=win)
plot(sp1$x, sp1$y)
mincontrast.my= function (observed=K, theoretical=theoret,
startpar,maxit=1e+4,...,
ctrl = list(q = 1/4,
p = 2, rmin = NULL, rmax = NULL),
fvlab = list(label = NULL,
desc = "minimum contrast fit"),
explain = list(dataname = NULL,
modelname = NULL, fname = NULL)) {
verifyclass(observed, "fv")
stopifnot(is.function(theoretical))
if (!any("par" %in% names(formals(theoretical))))
stop(paste("Theoretical function does not include an argument called",
sQuote("par")))
ctrl <- resolve.defaults(ctrl, list(q = 1/4, p = 2, rmin = NULL,
rmax = NULL))
fvlab <- resolve.defaults(fvlab, list(label = NULL, desc = "minimum contrast fit"))
explain <- resolve.defaults(explain, list(dataname = NULL,
modelname = NULL, fname = NULL))
rmin <- ctrl$rmin
rmax <- ctrl$rmax
if (!is.null(rmin) && !is.null(rmax))
{stopifnot(rmin < rmax && rmin >= 0)
}else {
alim <- attr(observed, "alim")
if (is.null(rmin))
rmin <- alim[1]
if (is.null(rmax))
rmax <- alim[2]
}
argu <- attr(observed, "argu")
rvals <- observed[[argu]]
valu <- attr(observed, "valu")
obs <- observed[[valu]]
if (max(rvals) < rmax)
stop(paste("rmax=", signif(rmax, 4), "exceeds the range of available data",
"= [", signif(min(rvals), 4), ",", signif(max(rvals),
4), "]"))
sub <- (rvals >= rmin) & (rvals <= rmax)
rvals <- rvals[sub]
obs <- obs[sub]
obsq <- obs^(ctrl$q)
objective <- function(par, obsq, theoretical, rvals, qq,
pp, rmin, rmax, ...) {
theo <- theoretical(par = par, rvals)
if (!is.vector(theo) || !is.numeric(theo))
stop("theoretical function did not return a numeric vector")
if (length(theo) != length(obs))
stop("theoretical function did not return the correct number of values")
discrep <- (abs(theo^qq - obsq))^pp
return(sum(discrep))
}
minimum <- optim(startpar, fn = objective, obsq = obsq, theoretical = theoretical,
rvals = rvals, qq = ctrl$q, pp = ctrl$p, rmin = rmin,
rmax = rmax, maxit=maxit)
fittheo <- theoretical(minimum$par, rvals)
label <- fvlab$label
desc <- fvlab$desc
if (is.null(label))
label <- paste("fit(", argu, ")", collapse = "")
fitfv <- bind.fv(observed[sub, ], data.frame(fit = fittheo),
label, desc)
result <- list(par = minimum$par, fit = fitfv, opt = minimum,
ctrl = list(p = ctrl$p, q = ctrl$q, rmin = rmin, rmax = rmax),
info = explain)
class(result) <- c("minconfit", class(result))
return(result)
}
sp1=Hom.Th(data.ppp,win=win)
plot(sp1$x, sp1$y)
# modified rThomas function
rThomas.my=function (kappa, sigma, mu, win = owin(c(0, 1), c(0, 1)))
{
stopifnot(is.numeric(sigma) && length(sigma) == 1 && sigma >
0)
stopifnot(is.numeric(mu) && length(mu) == 1 && mu >= 0)
# modified rThomas function
rThomas.my=function (kappa, sigma, mu, win = owin(c(0, 1), c(0, 1)))
{
stopifnot(is.numeric(sigma) && length(sigma) == 1 && sigma >
0)
stopifnot(is.numeric(mu) && length(mu) == 1 && mu >= 0)
#new function 1
thomclus <- function(x0, y0, sigma, mu,n) {
x <- rnorm(n, mean = x0, sd = sigma)
y <- rnorm(n, mean = y0, sd = sigma)
return(list(x = x, y = y))
}
#new function 2
check <- function(n,mu){
off.n=rpois(n,mu)
chose=which(off.n>=1)
off.n=off.n[chose]
return(list(chose,off.n))
}
result <- rNeymanScott.my(kappa, 4 * sigma, thomclus, check ,win, sigma = sigma,
mu = mu)
return(result)
}
# modified rThomas function
rThomas.my=function (kappa, sigma, mu, win = owin(c(0, 1), c(0, 1)))
{
stopifnot(is.numeric(sigma) && length(sigma) == 1 && sigma >
0)
stopifnot(is.numeric(mu) && length(mu) == 1 && mu >= 0)
#new function 1
thomclus <- function(x0, y0, sigma, mu,n) {
x <- rnorm(n, mean = x0, sd = sigma)
y <- rnorm(n, mean = y0, sd = sigma)
return(list(x = x, y = y))
}
#new function 2
check <- function(n,mu){
off.n=rpois(n,mu)
chose=which(off.n>=1)
off.n=off.n[chose]
return(list(chose,off.n))
}
result <- rNeymanScott.my(kappa, 4 * sigma, thomclus, check ,win, sigma = sigma,
mu = mu)
return(result)
}
sp1=Hom.Th(data.ppp,win=win)
plot(sp1$x, sp1$y)
#Calculate the modified rNeyman-Scott function; make the function work faster
# and be capability for large datasets; disable the parent information calculation
rNeymanScott.my=function (kappa, rmax, rcluster, ncluster, win = owin(c(0, 1), c(0, 1)), mu,
..., lmax = NULL)
{
win <- as.owin(win)
frame <- bounding.box(win)
dilated <- owin(frame$xrange + c(-rmax, rmax), frame$yrange +
c(-rmax, rmax))
if (is.im(kappa) && !is.subset.owin(as.owin(kappa), dilated))
stop(paste("The window in which the image", sQuote("kappa"),
"is defined\n", "is not large enough to contain the dilation of the window",
sQuote("win")))
total=mean(kappa)*win$xrange[2]*win$yrange[2]
if (total<=1e+5){
parents <- rpoispp.my(kappa, lmax = lmax, win = dilated)
result <- ppp(numeric(0), numeric(0), window = win)
parentid <- numeric(0)
if (parents$n > 0) {
chose=ncluster(n=parents$n, mu=mu)
if (length(chose[[1]])>0){
for (i in 1:length(chose[[1]])) {
k=chose[[1]][i]
n=chose[[2]][i]
cluster <- rcluster(x0=parents$x[k], y0=parents$y[k], n=n, ...)
chos.off<- which(cluster$x>=win$xrange[1] & cluster$x<=win$xrange[2]
& cluster$y>=win$yrange[1] & cluster$y<=win$yrange[2])
if (i==1) {
offsp.x=cluster$x[chos.off]
offsp.y=cluster$y[chos.off]
}else{
offsp.x=c(offsp.x,cluster$x[chos.off])
offsp.y=c(offsp.y,cluster$y[chos.off])
}
#parentid <- c(parentid, rep(i, cluster$n))
}
result <- ppp(offsp.x, offsp.y, window = frame, check = FALSE)
}
}
}else{
times=ceiling(total/1e+5)
kappa=kappa/times
pp.j=0
for (j in 1:times){
parents <- rpoispp.my(kappa, lmax = lmax, win = dilated)
result <- ppp(numeric(0), numeric(0), window = win)
parentid <- numeric(0)
if (parents$n > 0) {
chose=ncluster(n=parents$n, mu=mu)
if (length(chose[[1]])>0){
for (i in 1:length(chose[[1]])) {
k=chose[[1]][i]
n=chose[[2]][i]
cluster <- rcluster(x0=parents$x[k], y0=parents$y[k], n=n,...)
chos.off<- which(cluster$x>=win$xrange[1] & cluster$x<=win$xrange[2]
& cluster$y>=win$yrange[1] & cluster$y<=win$yrange[2])
if (i==1) {
offsp.x=cluster$x[chos.off]
offsp.y=cluster$y[chos.off]
}else{
offsp.x=c(offsp.x,cluster$x[chos.off])
offsp.y=c(offsp.y,cluster$y[chos.off])
}
if (i==1) pp.j=pp.j+1
#parentid <- c(parentid, rep(i, cluster$n))
}
}
if (pp.j==1){
offsp.x.to=offsp.x
offsp.y.to=offsp.y
}
if (pp.j>1){
offsp.x.to=c(offsp.x.to,offsp.x)
offsp.y.to=c(offsp.y.to,offsp.y)
}
}
}
result <- ppp(offsp.x.to, offsp.y.to, window = frame, check = FALSE)
rm(offsp.x.to,offsp.y.to)
}
#attr(result, "parents") <- parents
#attr(result, "parentid") <- parentid
return(result)
}
sp1=Hom.Th(data.ppp,win=win)
plot(sp1$x, sp1$y)
rpoispp.my=function (lambda, lmax = NULL, win = owin(c(0, 1), c(0, 1)),
...)
{
win <- if (is.im(lambda))
rescue.rectangle(as.owin(lambda))
else as.owin(win)
if (is.numeric(lambda))
return(runifpoispp(lambda, win))
if (is.null(lmax)) {
imag <- as.im(lambda, win, ...)
summ <- summary(imag)
lmax <- summ$max + 0.05 * diff(summ$range)
}
if (is.function(lambda)) {
X <- runifpoispp(lmax, win)
if (X$n == 0)
return(X)
prob <- lambda(X$x, X$y, ...)/lmax
u <- runif(X$n)
retain <- (u <= prob)
X <- X[retain, ]
return(X)
}
if (is.im(lambda)) {
X <- runifpoispp(lmax, win)
if (X$n == 0)
return(X)
prob <- lambda[X]/lmax
u <- runif(X$n)
retain <- (u <= prob)
X <- X[retain, ]
rm(prob);rm(retain);rm(u)
return(X)
}
stop("'lambda' must be a constant, a function or an image")
}
rpoispp.my=function (lambda, lmax = NULL, win = owin(c(0, 1), c(0, 1)),
...)
{
win <- if (is.im(lambda))
rescue.rectangle(as.owin(lambda))
else as.owin(win)
if (is.numeric(lambda))
return(runifpoispp(lambda, win))
if (is.null(lmax)) {
imag <- as.im(lambda, win, ...)
summ <- summary(imag)
lmax <- summ$max + 0.05 * diff(summ$range)
}
if (is.function(lambda)) {
X <- runifpoispp(lmax, win)
if (X$n == 0)
return(X)
prob <- lambda(X$x, X$y, ...)/lmax
u <- runif(X$n)
retain <- (u <= prob)
X <- X[retain, ]
return(X)
}
if (is.im(lambda)) {
X <- runifpoispp(lmax, win)
if (X$n == 0)
return(X)
prob <- lambda[X]/lmax
u <- runif(X$n)
retain <- (u <= prob)
X <- X[retain, ]
rm(prob);rm(retain);rm(u)
return(X)
}
stop("'lambda' must be a constant, a function or an image")
}
sp1=Hom.Th(data.ppp,win=win)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
Inhom.Po=function(data.ppp,covr,win,sig.t){
sig=NULL
fu=formu(names(covr))
# using maximum likelihood method to estimate parameter
data.ppm=ppm(data.ppp,fu,covariates=covr)
# simulate species distribution using the above fitted model
re=rmh.ppm(data.ppm)
return(re)
}
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
# inhomogeneous Thomas process
Inhom.Th <- function(data.ppp,covr,win,sig.t,P=0.05,simla=TRUE){
sig=rep(NA,times=length(covr))
fu=formu(names(covr))
# using maximum likelihood method to estimate parameter
data.ppm=ppm(data.ppp,fu,covariates=covr)
#estimate density and location density
lambda=predict(data.ppm,ngrid=c(covr[[1]]$dim[1],covr[[1]]$dim[2]))
lambda2=predict(data.ppm,locations=list(x=data.ppp$x,y=data.ppp$y))
# calculate inhomogeneous K function
K=Kinhom(data.ppp,lambda2,correction="border")
#pre-hand K result, remove NA in K
chose=which(!is.na(K$border) & K$border==max(K$border,na.rm=T))[1]
K=K[1:chose,]
#using minimum contrast method to estimate sigma, mu
Thom=thomas.estK.my(X=K,  startpar = c(sigma2=K$r[chose]/4, kappa=1/K$border[chose]),
lambda=lambda, maxit=1e+5 )
Thom.par=Thom$modelpar
print(Thom.par[2])
if (sig.t & Thom.par[2]<=200)
sig=confi.inter(covr,beta=coef(data.ppm),sigma=Thom.par[2],kappa=Thom.par[1],P)
if (simla){
# prepare for thinning process
cst=coef(data.ppm)[1]
lambda.c=lambda
M=max(lambda.c$v)
# pre-thinning density of offspring
Thom.par[3]=M/Thom.par[1]
if (Thom.par[3]<1e-4 | Thom.par[1]*win$xrange[2]*win$yrange[2] < 1 |Thom.par[3]>1e+4){
re=rmh(data.ppm)
while (re$n==0)
re=rmh(data.ppm)
}else{
re=rThomas.my(kappa=Thom.par[1],sigma=Thom.par[2],mu=Thom.par[3],win=win)
while (re$n==0)
re=rThomas.my(kappa=Thom.par[1],sigma=Thom.par[2],mu=Thom.par[3],win=win)
#thinning process
lambda.c$v=lambda.c$v/M
re=rthin(re,lambda.c)
}
}else{
re=ppp(x=c(1:2),y=c(1:2),window=win)
}
attr(re,"sig")=sig
attr(re,"distance")=Thom.par[2]
return(re)
}
sp1=Inhom.Po(data.ppp,covr=covr,win=win,sig.t=sig.t)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sig.t=FALSE
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
covr <- covr0[1:4]
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
covr0=Topogra.tran()#[c('meanelev', 'meanelev2', 'meanelev3', 'meanelev4')]
covr <- covr0[1:4]
covr
covr <- covr0
data.new=rbind(data.new,data.frame(sp=rep(sp[i],times=sp1$n),gx=sp1$x,gy=sp1$y))
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
covr <- covr0[1:4]
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
covr <- covr0[1:8]
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
length(covr0)
covr0
covr0=Topogra.tran()#[c('meanelev', 'meanelev2', 'meanelev3', 'meanelev4')]
length(covr0)
covr <- covr0[1:18]
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
env0 <- read.csv('LG.地形因子10米 2012-5-17083417.csv')
wdat0 <- with(env0,cbind( x=x, y=y, meanelev, meanelev2 = meanelev^2, meanelev3= meanelev^3, #  meanelev4= meanelev^4,
convex ,convex2 = convex^2, convex3=convex^3, # convex4=convex^4 ,
slope, slope2 = slope^2, slope3 = slope^3, # slope4 = slope^4,
asp.cos=cos(aspect*pi/180), asp.sin=sin(aspect*pi/180)))
write.csv(wdat0,'LG.topographic 10m poly4 2013-9-4.csv')
Topogra.tran=function(){
library(spatstat)
da0 <- read.csv('LG.topographic 10m poly4 2013-9-4.csv')
result=list()
for (i in 1:(ncol(da0)-3)){
da=da0[,i+3]
da=matrix(da,nrow=30,ncol=50,byrow=F)
result[[i]]=im(da,xcol=seq(0,500,length=50),yrow=seq(0,300,length=30))
}
names(result) <- names(da0[-(1:3)])
return(result)
}
#
covr0=Topogra.tran()
covr0
length(covr0)
covr <- covr0[1:11]
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=data[data$sp==sp[i],]
plot(sp1$x, sp1$y)
sp1=data[data$sp==sp[i],]
plot(sp1$x, sp1$y)
i=4
sp1=data[data$sp==sp[i],]
plot(sp1$x, sp1$y)
sp1=data[data$sp==sp[i],]
head(sp1)
plot(sp1$gx, sp1$gy)
plot(sp1$gx, sp1$gy)
sp1=Inhom.Po(data.ppp,covr=covr,win=win,sig.t=sig.t)
plot(sp1$x, sp1$y)
sp1=Hom.Th(data.ppp,win=win)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=data[data$sp==sp[i],]
plot(sp1$gx, sp1$gy)
sp1=Inhom.Po(data.ppp,covr=covr,win=win,sig.t=sig.t)
plot(sp1$x, sp1$y)
sp1=Hom.Th(data.ppp,win=win)
plot(sp1$x, sp1$y)
sp1=Hom.Th(data.ppp,win=win)
plot(sp1$x, sp1$y)
sp1=data[data$sp==sp[i],]
plot(sp1$gx, sp1$gy)
sp1=data[data$sp==sp[i],]
plot(sp1$gx, sp1$gy)
sp1=Hom.Th(data.ppp,win=win)
plot(sp1$x, sp1$y)
sp1=Hom.Th(data.ppp,win=win)
plot(sp1$x, sp1$y)
sp1=Hom.Th(data.ppp,win=win)
plot(sp1$x, sp1$y)
sp1=Hom.Th(data.ppp,win=win)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
plot(sp1$gx, sp1$gy)
sp1=data[data$sp==sp[i],]
plot(sp1$gx, sp1$gy)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
plot(sp1$x, sp1$y)
sp1=Inhom.Th(data.ppp,covr=covr,win=win,sig.t=sig.t,P=alpha)
sp1
unclass(sp1)
